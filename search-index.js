var N = null;var searchIndex = {};
searchIndex["connect6"]={"doc":"Rust implementation of connect6 and self-playing policies…","items":[[0,"agent","connect6","Agent for playing game with given policy",N,N],[3,"Path","connect6::agent","Unit of playing history, turn, board and selected position.",N,N],[12,"turn","","",0,N],[12,"board","","",0,N],[12,"pos","","",0,N],[3,"PlayResult","","Result of playing game, consists of winner and path…",N,N],[12,"winner","","",1,N],[12,"path","","",1,N],[3,"Agent","","Loop based single policy agent.",N,N],[3,"AsyncAgent","","Agent for playing multiple games asynchronously.",N,N],[11,"new","","Construct a new `Agent` with given policy.",2,[[["policy"]],["agent"]]],[11,"debug","","Construct a debug mode `Agent` with given policy, it will…",2,[[["policy"]],["agent"]]],[11,"play","","Self-play the game with given policy.",2,[[["self"]],["result",["playresult","box"]]]],[11,"new","","Construct a new AsyncAgent.",3,[[["f"]],["asyncagent"]]],[11,"debug","","Construct a debug mode AsyncAgent, it will display the dbg…",3,[[["f"]],["asyncagent"]]],[11,"run","","Self-play the given number of games asynchronously on…",3,[[["self"],["i32"]],["vec",["playresult"]]]],[0,"game","connect6","Implementation of Game Connect6",N,N],[3,"Game","connect6::game","Implementation of Game Connect6",N,N],[3,"Paint","","Simple ascii buffer",N,N],[3,"SetResult","","Result of setting stone",N,N],[12,"player","","",4,N],[12,"num_remain","","",4,N],[12,"position","","",4,N],[3,"Block","","Swapable two Cumulative arrays for dynamic programming",N,N],[3,"Cumulative","","Number of the continuous stones for each directions.",N,N],[4,"Player","","enum `Player`, Black: -1, None: 0, White: 1",N,N],[13,"Black","","",5,N],[13,"None","","",5,N],[13,"White","","",5,N],[4,"Path","","Searching direction.",N,N],[13,"Right","","",6,N],[13,"Down","","",6,N],[13,"RightDown","","",6,N],[13,"LeftDown","","",6,N],[5,"search","","Algorithm for finding winner of the Connect6.",N,[[["board"]],["player"]]],[11,"new","","Construct a new `SetResult`",4,[[],["setresult"]]],[11,"with_game","","Construct a `SetResult` with given game state and position.",4,N],[11,"new","","Construct a new `Game`",7,[[],["game"]]],[11,"set","","Set the stone of current player with given position as…",7,N],[11,"get_board","","Return board",7,[[["self"]],["board"]]],[11,"get_turn","","Return current player",7,[[["self"]],["player"]]],[11,"get_remain","","Return num_remain",7,[[["self"]],["i32"]]],[11,"print","","Print the board status",7,[[["self"],["write"]],["result",["usize"]]]],[11,"is_game_end","","Return game winner if game end, else Player::None",7,[[["self"]],["player"]]],[11,"new","","Construct a new `Paint`.",8,[[["write"]],["paint"]]],[11,"push","","Push a byte slice to the buffer",8,N],[11,"push_one","","Push a single u8 to the buffer",8,[[["self"],["u8"]]]],[11,"write","","Write buffer to the io stream",8,[[["self"]],["result",["usize"]]]],[11,"switch","","Switching it, Black to White, White to Black",5,[[["self"]],["player"]]],[11,"mut_switch","","Switch mutably",5,[[["self"]]]],[11,"new","","Construct a new Cumulative",9,[[],["cumulative"]]],[11,"get","","Get a sum of specific path",9,[[["self"],["path"]],["i32"]]],[11,"get_mut","","Get a mutable reference of cell with specific path",9,[[["self"],["path"]],["i32"]]],[11,"new","","Construct a new Block.",10,[[],["block"]]],[11,"as_tuple","","Get a tuple representation of block, (prev, current).",10,N],[11,"get_prev","","Get a previous `Cumulative` cell for specific direction.",10,[[["self"],["usize"],["path"]],["cumulative"]]],[11,"update_now","","Update current row with given update rule",10,[[["self"],["f"]]]],[11,"update_row","","Swap the row and clear the current.",10,[[["self"]]]],[0,"policy","connect6","Predefined policy for agent to play game.",N,N],[3,"HyperParameter","connect6::policy","Hyperparameter for implementing `AlphaZero`.",N,N],[12,"num_simulation","","",11,N],[12,"epsilon","","",11,N],[12,"dirichlet_alpha","","",11,N],[12,"c_puct","","",11,N],[3,"RandomEvaluator","","Evaluator for test, Random Value Evaluator",N,N],[3,"AlphaZero","","Implementation of policy `AlphaZero` based on combined…",N,N],[3,"DefaultPolicy","","Policy for pure Monte Carlo tree search implementation",N,N],[3,"IoPolicy","","Policy for in-game user selection with io",N,N],[3,"MultiPolicy","","Black-White seperable policy",N,N],[3,"RandomPolicy","","Play game with random selection.",N,N],[3,"Node","","Shared memory for making simulation wihout copying board…",N,N],[12,"board","","",12,N],[12,"possible","","",12,N],[3,"Simulate","","Game simulator with shared memory for efficient tree…",N,N],[12,"turn","","",13,N],[12,"num_remain","","",13,N],[12,"pos","","",13,N],[12,"node","","",13,N],[5,"hash","","generate hash value of board",N,[[["board"]],["u64"]]],[5,"diff_board","","compare the board and return the difference between…",N,[[["board"],["board"]],["option"]]],[11,"new","","Alias of HyperParameter::default",11,[[],["hyperparameter"]]],[11,"light_weight","","Light weight AlphaZero parameters, num simulation: 2",11,[[],["hyperparameter"]]],[11,"rand_board","","Generate random board: f32 with range (-1, 1)",14,N],[11,"new","","Construct a new `AlphaZero` policy with given evalueator",15,[[["box",["evaluator"]]],["alphazero"]]],[11,"with_param","","Construct a `AlphaZero` with given hyperparam",15,[[["box",["evaluator"]],["hyperparameter"]],["alphazero"]]],[11,"new","","Construct a new `DefaultPolicy`",16,[[],["defaultpolicy"]]],[11,"with_num_iter","","Construct a `DefaultPolicy` with number of iteration in…",16,[[["i32"]],["defaultpolicy"]]],[11,"new","","Construct a new IoPolicy",17,[[["read"],["write"]],["iopolicy"]]],[11,"new","","Construct a new `MultiPolicy`",18,[[["policy"],["policy"]],["multipolicy"]]],[11,"new","","Construct a new RandomPolicy",19,[[],["randompolicy"]]],[11,"new","","Construct a new `Simulate`.",13,[[],["simulate"]]],[11,"from_game","","Construct a `Simulate` from the game",13,[[["game"]],["simulate"]]],[11,"deep_clone","","Deep clone the simulation.",13,[[["self"]],["simulate"]]],[11,"board","","Get the board from node.",13,[[["self"]],["board"]]],[11,"possible","","Get the possible selections from node.",13,[[["self"]],["vec"]]],[11,"search_winner","","Find the winner of game",13,[[["self"]],["player"]]],[11,"validate","","Validate the position, check invalid position err or…",13,[[["self"],["usize"],["usize"]],["bool"]]],[11,"next_turn","","Return next turn of game.",13,[[["self"]],["player"]]],[11,"simulate","","Make the new simulation with given position.",13,[[["self"],["usize"],["usize"]],["simulate"]]],[11,"simulate_in","","Modify the current state to simulate given position.",13,[[["self"],["usize"],["usize"]]]],[11,"rollback_in","","Modify the inner state to recover the given simulation.",13,[[["self"],["usize"],["usize"]]]],[8,"Evaluator","","Evaluator for applying value, policy approximator to…",N,N],[10,"eval","","",20,[[["self"],["player"],["vec"]],["option"]]],[8,"Policy","","trait for playing game with Agent.",N,N],[10,"next","","generate next selection",21,[[["self"],["game"]],["option"]]],[6,"Board","connect6","Type alias of [[Player; BOARD_SIZE]; BOARD_SIZE];",N,N],[17,"BOARD_SIZE","","Length of one side",N,N],[17,"BOARD_CAPACITY","","Square of BOARD_SIZE",N,N],[14,"io_policy_stdio","","Create IoPolicy with stdio",N,N],[11,"from","connect6::agent","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","connect6::game","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","connect6::policy","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"eval","","",14,[[["self"],["player"],["vec"]],["option"]]],[11,"next","","Select next position with `AlphaZero` policy",15,[[["self"],["game"]],["option"]]],[11,"next","","Select position based on pure MCTS.",16,[[["self"],["game"]],["option"]]],[11,"next","","validate user input from stdin and passing it to `Agent`",17,[[["self"],["game"]],["option"]]],[11,"next","","Condition on `game.turn` to pass policy seperately",18,[[["self"],["game"]],["option"]]],[11,"next","","make random selection",19,[[["self"],["game"]],["option"]]],[11,"eq","connect6::agent","",0,[[["self"],["path"]],["bool"]]],[11,"ne","","",0,[[["self"],["path"]],["bool"]]],[11,"eq","connect6::game","",4,[[["self"],["setresult"]],["bool"]]],[11,"ne","","",4,[[["self"],["setresult"]],["bool"]]],[11,"eq","","",5,[[["self"],["player"]],["bool"]]],[11,"eq","","",9,[[["self"],["cumulative"]],["bool"]]],[11,"ne","","",9,[[["self"],["cumulative"]],["bool"]]],[11,"default","","",5,[[],["player"]]],[11,"default","connect6::policy","Generate default HyperParameter",11,[[],["hyperparameter"]]],[11,"clone","connect6::game","",5,[[["self"]],["player"]]],[11,"clone","","",6,[[["self"]],["path"]]],[11,"clone","","",9,[[["self"]],["cumulative"]]],[11,"clone","connect6::policy","",11,[[["self"]],["hyperparameter"]]],[11,"from","connect6::game","",5,[[["i32"]],["player"]]],[11,"drop","connect6::policy","",13,[[["self"]]]],[11,"fmt","connect6::agent","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","connect6::game","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"hash","","",5,N]],"paths":[[3,"Path"],[3,"PlayResult"],[3,"Agent"],[3,"AsyncAgent"],[3,"SetResult"],[4,"Player"],[4,"Path"],[3,"Game"],[3,"Paint"],[3,"Cumulative"],[3,"Block"],[3,"HyperParameter"],[3,"Node"],[3,"Simulate"],[3,"RandomEvaluator"],[3,"AlphaZero"],[3,"DefaultPolicy"],[3,"IoPolicy"],[3,"MultiPolicy"],[3,"RandomPolicy"],[8,"Evaluator"],[8,"Policy"]]};
searchIndex["cppconnect6"]={"doc":"C++ Bindings for libconnect6","items":[[5,"cpp_play","cppconnect6","Return Connect6 playing results with given cpp callback.",N,[[["policycallback"],["allocatortype",["rawpath"]],["allocatortype",["rawplayresult"]],["bool"],["i32"]],["rawvec",["rawplayresult"]]]],[5,"cpp_self_play","","Return Connect6 self-playing results with given cpp…",N,[[["callback"],["allocatortype",["rawpath"]],["allocatortype",["rawplayresult"]],["i32"],["f32"],["f64"],["f32"],["bool"],["i32"]],["rawvec",["rawplayresult"]]]],[5,"cpp_play_with","","Returns Connect6 results with given cpp policy and user…",N,[[["callback"],["allocatortype",["rawpath"]],["i32"],["f32"],["f64"],["f32"]],["rawplayresult"]]],[0,"cppbind","","Rust bindings for C++ interface and impl of AlphaZero…",N,N],[3,"CppPolicy","cppconnect6::cppbind","C++ FFI policy bindings.",N,N],[3,"CppEval","","AlphaZero value, policy approximator with c ffi callback",N,N],[3,"Allocator","","Allocator for FFI, (ex. C++ new operator)",N,N],[3,"RawPath","","Path object for c ffi",N,N],[12,"turn","","",0,N],[12,"board","","",0,N],[12,"row","","",0,N],[12,"col","","",0,N],[3,"RawPlayResult","","PlayResult object for c ffi",N,N],[12,"winner","","",1,N],[12,"path","","",1,N],[12,"len","","",1,N],[3,"RawVec","","Vector object for c ffi",N,N],[12,"vec","","",2,N],[12,"len","","",2,N],[5,"board_to_float","","Convert Player:Board to CFloat:Board",N,N],[0,"ffi_test","","Test implementation for Rust-C++ FFI.",N,N],[5,"test_new_raw_path","cppconnect6::cppbind::ffi_test","Return `RawPath::new()`;",N,[[],["rawpath"]]],[5,"test_with_raw_path","","Generate sample `agent::Path` and return…",N,[[],["rawpath"]]],[5,"test_echo_raw_path","","Get path info from C++ and return repackaged one.",N,N],[5,"test_with_raw_play_result","","Generate sample `agent::PlayResult` and return…",N,[[["allocatortype",["rawpath"]]],["rawplayresult"]]],[5,"test_echo_raw_play_result","","Get play result from C++ and return repackaged one.",N,N],[5,"test_with_raw_vec","","Generate sample `Vec<i32>` and return `RawVec::with_vec`.",N,[[["allocatortype",["cint"]]],["rawvec",["cint"]]]],[5,"test_echo_raw_vec","","Get int array from C++ and return repackaged one.",N,N],[5,"test_echo_cppeval","","Get boards and callback then return the evaluation from…",N,N],[5,"test_cpp_policy","","",N,N],[11,"new","cppconnect6::cppbind","Create new CppPolicy object.",3,[[["policycallback"]],["cpppolicy"]]],[11,"callback","","Call callback method with given board and return position.",3,[[["self"],["board"]],["option"]]],[11,"new","","Create new CppEval object",4,[[["callback"]],["cppeval"]]],[11,"new","","Create new Allocator with given allocator",5,[[["allocatortype"]],["allocator"]]],[11,"get","","Obtain new dynamic memory from self.allocator",5,N],[11,"new","","Create zero initialized RawPath",0,[[],["rawpath"]]],[11,"with_path","","Create RawPath from Path",0,[[["path"]],["rawpath"]]],[11,"with_result","","Create RawPlayResult from PlayResult with given allocator…",1,[[["playresult"],["allocator"]],["rawplayresult"]]],[11,"with_vec","","Create RawVec from Vec with given allocator (for C++ new…",2,[[["vec"],["allocator"]],["rawvec"]]],[6,"PolicyCallback","","void(float* boards, int* position_result)",N,N],[6,"CInt","","std::os::raw::c_int",N,N],[6,"CFloat","","std::os::raw::c_float",N,N],[6,"Callback","","void(int player, float* values, float* board, int length)",N,N],[6,"AllocatorType","","Allocator Type for FFI, (ex. C++ new operator)",N,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"default","","Alias of RawPath::new",0,[[],["rawpath"]]],[11,"clone","","",0,[[["self"]],["rawpath"]]],[11,"next","","",3,[[["self"],["game"]],["option"]]],[11,"eval","","",4,[[["self"],["player"],["vec"]],["option"]]]],"paths":[[3,"RawPath"],[3,"RawPlayResult"],[3,"RawVec"],[3,"CppPolicy"],[3,"CppEval"],[3,"Allocator"]]};
searchIndex["pyconnect6"]={"doc":"Python binding of libconnect6","items":[[5,"PyInit_pyconnect6","pyconnect6","",N,N],[0,"macro_def","","Macro definition",N,N],[3,"PyPolicy","pyconnect6::macro_def","",N,N],[5,"create_pypolicy","","py_policy generator",N,[[["python"]],["pyresult",["pypolicy"]]]],[11,"__call__","","",0,[[["self"],["python"],["pyobject"],["pyobject"]],["pyresult",["pyobject"]]]],[0,"pybind","pyconnect6","Rust bindings for python interface and impl of AlphaZero…",N,N],[3,"PathWrapper","pyconnect6::pybind","connect6::agent::Path wrapper for Python object conversion",N,N],[12,"0","","",1,N],[3,"RunResultWrapper","","connect6::agent::PlayResult wrapper for Python object…",N,N],[12,"0","","",2,N],[3,"PyEval","","AlphaZero value, policy approximator with python callable…",N,N],[5,"pyiter_to_vec","","Convert PyIterator to Vec",N,[[["python"],["pyobject"]],["option",["vec"]]]],[5,"pylist_from_board","","Convert board to PyList",N,[[["python"],["board"]],["pyobject"]]],[5,"pylist_from_multiple","","Convert multiple boards to PyList",N,[[["python"],["vec"]],["pyobject"]]],[11,"new","","Create new `PyEval` with given `PyObject`.",3,[[["pyobject"]],["pyeval"]]],[14,"must","pyconnect6","Panic with given error string if given Result is Err",N,N],[14,"py_policy","","Create random python policy for testing AlphaZero",N,N],[11,"from","pyconnect6::macro_def","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone_ref","","",0,[[["self"],["python"]],["t"]]],[11,"release_ref","","",0,N],[11,"with_extracted","","",0,[[["python"],["pyobject"],["f"]],["result",["pyerr"]]]],[11,"from","pyconnect6::pybind","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"eval","","Get value and prob from `PyObject`",3,[[["self"],["player"],["vec"]],["option"]]],[11,"as_object","pyconnect6::macro_def","",0,[[["self"]],["pyobject"]]],[11,"into_object","","",0,[[["self"]],["pyobject"]]],[11,"unchecked_downcast_from","","Unchecked downcast from PyObject to Self. Undefined…",0,[[["pyobject"]],["self"]]],[11,"unchecked_downcast_borrow_from","","Unchecked downcast from PyObject to Self. Undefined…",0,[[["pyobject"]],["self"]]],[11,"downcast_from","","",0,[[["python"],["pyobject"]],["result",["pypolicy","pythonobjectdowncasterror"]]]],[11,"downcast_borrow_from","","",0,[[["python"],["pyobject"]],["result",["pypolicy","pythonobjectdowncasterror"]]]],[11,"type_object","","",0,[[["python"]],["pytype"]]],[11,"to_py_object","","",0,[[["self"],["python"]],["pypolicy"]]],[11,"into_py_object","","",0,[[["self"],["python"]],["pypolicy"]]],[11,"with_borrowed_ptr","","",0,[[["self"],["python"],["f"]],["r"]]],[11,"to_py_object","pyconnect6::pybind","Return `PyTuple, (turn: int, board: list(int, board_size…",1,[[["self"],["python"]],["pytuple"]]],[11,"to_py_object","","Return `PyTuple, (winner: int, path: list(Path as PyTuple))`",2,[[["self"],["python"]],["pytuple"]]],[11,"extract","pyconnect6::macro_def","",0,[[["python"],["pyobject"]],["pyresult",["pypolicy"]]]],[11,"initialize","","",0,[[["python"],["option",["str"]]],["pyresult",["pytype"]]]],[11,"add_to_module","","",0,[[["python"],["pymodule"]],["pyresult"]]],[11,"size","","",0,[[],["usize"]]],[11,"alloc","","",0,N],[11,"dealloc","","",0,N]],"paths":[[3,"PyPolicy"],[3,"PathWrapper"],[3,"RunResultWrapper"],[3,"PyEval"]]};
searchIndex["sample"]={"doc":"Rust sample usage of connect6.","items":[],"paths":[]};
initSearch(searchIndex);addSearchOptions(searchIndex);
